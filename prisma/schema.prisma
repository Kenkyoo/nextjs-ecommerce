generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model laptops {
  id                   Int    @id
  title                String
  description          String
  category             String
  price                Float
  discountPercentage   Float
  rating               Float
  stock                BigInt
  tags                 Json   @db.Json
  brand                String
  sku                  String
  weight               BigInt
  dimensions_width     Float  @map("dimensions.width")
  dimensions_height    Float  @map("dimensions.height")
  dimensions_depth     Float  @map("dimensions.depth")
  warrantyInformation  String
  shippingInformation  String
  availabilityStatus   String
  reviews              Json   @db.Json
  returnPolicy         String
  minimumOrderQuantity BigInt
  meta_createdAt       String @map("meta.createdAt")
  meta_updatedAt       String @map("meta.updatedAt")
  meta_barcode         String @map("meta.barcode")
  meta_qrCode          String @map("meta.qrCode")
  images               Json   @db.Json
  thumbnail            String
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model smartphones {
  id                   Int    @id
  title                String
  description          String
  category             String
  price                Float
  discountPercentage   Float
  rating               Float
  stock                BigInt
  tags                 Json   @db.Json
  brand                String
  sku                  String
  weight               BigInt
  dimensions_width     Float  @map("dimensions.width")
  dimensions_height    Float  @map("dimensions.height")
  dimensions_depth     Float  @map("dimensions.depth")
  warrantyInformation  String
  shippingInformation  String
  availabilityStatus   String
  reviews              Json   @db.Json
  returnPolicy         String
  minimumOrderQuantity BigInt
  meta_createdAt       String @map("meta.createdAt")
  meta_updatedAt       String @map("meta.updatedAt")
  meta_barcode         String @map("meta.barcode")
  meta_qrCode          String @map("meta.qrCode")
  images               Json   @db.Json
  thumbnail            String
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model tablets {
  id                   Int    @id
  title                String
  description          String
  category             String
  price                Float
  discountPercentage   Float
  rating               Float
  stock                BigInt
  tags                 Json   @db.Json
  brand                String
  sku                  String
  weight               BigInt
  dimensions_width     Float  @map("dimensions.width")
  dimensions_height    Float  @map("dimensions.height")
  dimensions_depth     Float  @map("dimensions.depth")
  warrantyInformation  String
  shippingInformation  String
  availabilityStatus   String
  reviews              Json   @db.Json
  returnPolicy         String
  minimumOrderQuantity BigInt
  meta_createdAt       String @map("meta.createdAt")
  meta_updatedAt       String @map("meta.updatedAt")
  meta_barcode         String @map("meta.barcode")
  meta_qrCode          String @map("meta.qrCode")
  images               Json   @db.Json
  thumbnail            String
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  password       String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  cartItems CartItem[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 wishes Product[] @relation("UserWishes")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model Product {
  id        Int      @id @default(autoincrement())
  title     String
  price     Float
  thumbnail String
  images    Json
  description String?
  category             String
  rating               Float
  stock                BigInt
  tags                 Json   @db.Json
  brand                String
  sku                  String
  discountPercentage   Float
  returnPolicy         String
  cartItems CartItem[]
  wishesList User[] @relation("UserWishes")
}

model CartItem {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int      @default(1)
  createdAt DateTime @default(now())

  @@unique([userId, productId]) // evita duplicados
}